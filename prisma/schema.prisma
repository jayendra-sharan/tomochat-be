generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  firebaseUid        String              @unique
  email              String              @unique
  displayName        String
  userType           String              @default("human") // "human" | "system"
  rooms              RoomMember[]
  messages           Message[]
  notificationTokens NotificationToken[]
  profile            UserProfile?

  MessageStatus MessageStatus[]
  connectionsA  UserConnection[] @relation("ConnectionA")
  connectionsB  UserConnection[] @relation("ConnectionB")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  fullName  String?
  location  String?
  avatarUrl String?
  bio       String?
}

model Room {
  id          String       @id @default(cuid())
  name        String
  roomType    String
  topic       String
  inviteLink  String       @unique
  members     RoomMember[]
  messages    Message[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  lastMessage String?      @default("")
  description String?
}

model RoomMember {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId   String
  role     String   @default("member") // "member" | "admin"
  joinedAt DateTime @default(now())

  @@unique([userId, roomId])
}

model Message {
  id            String          @id @default(cuid())
  content       String
  suggestion    Json?
  sender        User            @relation(fields: [senderId], references: [id])
  senderId      String
  room          Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId        String
  createdAt     DateTime        @default(now())
  perUserStatus MessageStatus[]
}

model NotificationToken {
  id        String   @id @default(cuid())
  token     String
  platform  String // 'expo', 'fcm-web', 'apns', etc.
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token, platform])
}

model MessageStatus {
  id        String  @id @default(cuid())
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  isRead    Boolean   @default(false)
  isDeleted Boolean   @default(false)
  delivered Boolean   @default(false)
  readAt    DateTime?
  deletedAt DateTime?

  @@unique([messageId, userId])
}

model UserConnection {
  id        String   @id @default(cuid())
  userA     User     @relation("ConnectionA", fields: [userAId], references: [id])
  userAId   String
  userB     User     @relation("ConnectionB", fields: [userBId], references: [id])
  userBId   String
  createdAt DateTime @default(now())

  @@unique([userAId, userBId])
}
